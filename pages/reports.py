import streamlit as st
from datetime import date
from typing import List, Dict, Any

from utils.database import (
    get_report, upsert_report, delete_report, 
    fetch_sap_catalog, fetch_employees_catalog
)
from models.data_models import TaskModel, LineEmployeeModel, SupportRoleModel
from utils.data_utils import (
    to_int_safe, normalize_task_row, extract_user_fields,
    ensure_row_ids, next_seq, get_available_sap_codes_for_line,
    calculate_line_statistics, calculate_product_summary
)
from components.site_selector import site_selector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û—Ç—á–µ—Ç—ã - StarLine Reports GUI",
    page_icon="üìã",
    layout="wide"
)

st.title("üìã –í–µ–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
col_debug1, col_debug2 = st.columns([1, 3])
with col_debug1:
    if st.button("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"):
        st.session_state.debug_mode = not st.session_state.get('debug_mode', False)
        st.rerun()
    
    if st.session_state.get('debug_mode', False):
        st.success("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    else:
        st.info("‚ÑπÔ∏è –û—Ç–ª–∞–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")

with col_debug2:
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"):
        st.session_state.tasks_A3 = []
        st.session_state.tasks_A4 = []
        st.session_state.line_emps = []
        st.session_state.supports = []
        st.session_state.prefilled = False
        st.rerun()

# –í—ã–±–æ—Ä —É—á–∞—Å—Ç–∫–∞ –∏ –¥–∞—Ç—ã
site_id, site_name = site_selector()
rep_date = st.date_input(
    "–î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞", 
    value=date.today(), 
    key="date_input"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞
existing = get_report(site_id, rep_date)
if existing:
    st.success("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á—ë—Ç ‚Äî –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –ë–î")
else:
    st.info("‚ÑπÔ∏è –û—Ç—á—ë—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
if 'tasks_A3' not in st.session_state:
    st.session_state.tasks_A3 = []
if 'tasks_A4' not in st.session_state:
    st.session_state.tasks_A4 = []
if 'line_emps' not in st.session_state:
    st.session_state.line_emps = []
if 'supports' not in st.session_state:
    st.session_state.supports = []

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
if existing and not st.session_state.get('prefilled'):
    st.session_state.tasks_A3 = [
        {
            "id": t.get('id'),
            "sap_code": t['sap_code'],
            "product_name": t['product_name'],
            "norm_per_employee": t['norm_per_employee'],
            "discount_percent": t.get('discount_percent', 0),
            "norm_with_discount": t.get('norm_with_discount', t['norm_per_employee']),
            "qty_made": t['qty_made'],
            "count_by_norm": t['count_by_norm'],
            "line": t['line']
        }
        for t in existing['tasks'] if t['line'] == 'A3']
    
    st.session_state.tasks_A4 = [
        {
            "id": t.get('id'),
            "sap_code": t['sap_code'],
            "product_name": t['product_name'],
            "norm_per_employee": t['norm_per_employee'],
            "discount_percent": t.get('discount_percent', 0),
            "norm_with_discount": t.get('norm_with_discount', t['norm_per_employee']),
            "qty_made": t['qty_made'],
            "count_by_norm": t['count_by_norm'],
            "line": t['line']
        }
        for t in existing['tasks'] if t['line'] == 'A4']
    
    st.session_state.line_emps = [dict(x) for x in existing['line_emps']]
    st.session_state.supports = [dict(x) for x in existing['supports']]
    st.session_state.prefilled = True

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
@st.cache_data(ttl=3600, show_spinner=False)
def load_cached_sap():
    cat = fetch_sap_catalog()
    return {
        'by_code': {x['sap_code']: x for x in cat},
        'codes': [x['sap_code'] for x in cat],
    }

@st.cache_data(ttl=3600, show_spinner=False)
def load_cached_emps():
    emps = fetch_employees_catalog()
    return {
        'id_to_fio': {int(e['id']): e['fio'] for e in emps},
        'ids': [int(e['id']) for e in emps],
        'full': emps,
    }

sap_cache = load_cached_sap()
sap_by_code = sap_cache['by_code']
sap_codes = sap_cache['codes']

emps_cache = load_cached_emps()
id_to_fio = emps_cache['id_to_fio']

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def add_task(line: str, sap_code: str, discount_percent: int, qty_made: int, count_by_norm: bool):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    if not sap_code:
        st.error("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ SAP –∫–æ–¥")
        return False
    
    item = sap_by_code.get(sap_code)
    if not item:
        st.error("‚ö†Ô∏è SAP –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
        return False
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—É –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ float, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ decimal.Decimal
        raw_norm = item.get(f'norm_{line.lower()}_per_employee', 0)
        norm_per_emp = float(raw_norm) if raw_norm is not None else 0.0
        
        discount = float(discount_percent)
        qty = float(qty_made)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ä–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        if norm_per_emp <= 0:
            st.error(f"‚ö†Ô∏è –ù–æ—Ä–º–∞ –¥–ª—è –ª–∏–Ω–∏–∏ {line} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return False
        
        norm_with_discount = int(round(norm_per_emp * (1 - discount/100)))
        
    except (ValueError, TypeError) as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
        return False
    
    new_task = {
        "id": None,  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î
        "sap_code": sap_code,
        "product_name": item['product_name'],
        "norm_per_employee": norm_per_emp,
        "discount_percent": int(discount),
        "norm_with_discount": norm_with_discount,
        "qty_made": int(qty),
        "count_by_norm": count_by_norm,
        "line": line
    }
    
    if line == 'A3':
        st.session_state.tasks_A3.append(new_task)
    else:
        st.session_state.tasks_A4.append(new_task)
    
    st.success(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –ª–∏–Ω–∏—é {line}")
    return True

def remove_task(line: str, index: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if line == 'A3':
        if 0 <= index < len(st.session_state.tasks_A3):
            removed = st.session_state.tasks_A3.pop(index)
            st.success(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{removed['sap_code']}' —É–¥–∞–ª–µ–Ω–æ —Å –ª–∏–Ω–∏–∏ {line}")
    else:
        if 0 <= index < len(st.session_state.tasks_A4):
            removed = st.session_state.tasks_A4.pop(index)
            st.success(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{removed['sap_code']}' —É–¥–∞–ª–µ–Ω–æ —Å –ª–∏–Ω–∏–∏ {line}")

def add_employee(employee_id: int, work_time: float, line: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if employee_id == 0:
        st.error("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        return False
    
    fio = id_to_fio.get(employee_id, "")
    if not fio:
        st.error("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    try:
        work_hours = float(work_time)
        if work_hours <= 0:
            st.error("‚ö†Ô∏è –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return False
    except (ValueError, TypeError) as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞ —ç—Ç—É –ª–∏–Ω–∏—é
    existing_emp = next((emp for emp in st.session_state.line_emps 
                        if emp.get('employee_id') == employee_id and emp.get('line') == line), None)
    if existing_emp:
        st.error(f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {fio} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ª–∏–Ω–∏—é {line}")
        return False
    
    new_emp = {
        "id": None,
        "employee_id": employee_id,
        "fio": fio,
        "work_time": work_hours,
        "line": line
    }
    
    st.session_state.line_emps.append(new_emp)
    st.success(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {fio} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ª–∏–Ω–∏—é {line}")
    return True

def remove_employee(index: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if 0 <= index < len(st.session_state.line_emps):
        removed = st.session_state.line_emps.pop(index)
        st.success(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {removed['fio']} —É–¥–∞–ª–µ–Ω")

def add_support_role(role: str, employee_id: int, work_time: float):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if employee_id == 0:
        st.error("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        return False
    
    fio = id_to_fio.get(employee_id, "")
    if not fio:
        st.error("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    try:
        work_hours = float(work_time)
        if work_hours <= 0:
            st.error("‚ö†Ô∏è –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return False
    except (ValueError, TypeError) as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
    existing_role = next((s for s in st.session_state.supports 
                         if s.get('role') == role), None)
    if existing_role:
        st.error(f"‚ö†Ô∏è –†–æ–ª—å {role} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
        return False
    
    new_support = {
        "id": None,
        "role": role,
        "employee_id": employee_id,
        "fio": fio,
        "work_time": work_hours
    }
    
    st.session_state.supports.append(new_support)
    st.success(f"‚úÖ –†–æ–ª—å {role} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {fio}")
    return True

def remove_support_role(index: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if 0 <= index < len(st.session_state.supports):
        removed = st.session_state.supports.pop(index)
        st.success(f"‚úÖ –†–æ–ª—å {removed['role']} —É–¥–∞–ª–µ–Ω–∞")

# –§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–∫–∞ –ö–∞—Ç—é—à–∞)
if site_name == '–ö–∞—Ç—é—à–∞':
    st.header("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π")
    
    col_form1, col_form2 = st.columns(2)
    
    with col_form1:
        st.subheader("üìã –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        with st.form("add_task_form"):
            line = st.selectbox("–õ–∏–Ω–∏—è", ["A3", "A4"], key="task_line")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º SAP –∫–æ–¥—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
            available_codes = get_available_sap_codes_for_line(line, sap_by_code)
            sap_code = st.selectbox("–ò–∑–¥–µ–ª–∏–µ", [""] + available_codes, 
                                  format_func=lambda x: f"{x} - {sap_by_code.get(x, {}).get('product_name', '')}" if x else "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ",
                                  key="task_sap")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–∑–¥–µ–ª–∏–∏
            if sap_code and sap_code in sap_by_code:
                item = sap_by_code[sap_code]
                norm_key = f'norm_{line.lower()}_per_employee'
                norm_value = item.get(norm_key, 0)
                if norm_value:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å decimal.Decimal
                    norm_value_float = float(norm_value)
                    st.info(f"üìã **{item['product_name']}**\n"
                           f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞ –Ω–∞ {line}: **{norm_value_float:.1f}** —à—Ç/—á–µ–ª")
                else:
                    st.warning(f"‚ö†Ô∏è –ò–∑–¥–µ–ª–∏–µ **{item['product_name']}** –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –ª–∏–Ω–∏–∏ {line}")
            
            discount_percent = st.number_input("–°–∫–∏–¥–∫–∞ –Ω–∞ –Ω–æ—Ä–º—É (%)", min_value=0, max_value=100, value=0, step=1, key="task_discount")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
            if sap_code and sap_code in sap_by_code and discount_percent > 0:
                item = sap_by_code[sap_code]
                norm_key = f'norm_{line.lower()}_per_employee'
                base_norm = item.get(norm_key, 0)
                if base_norm:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å decimal.Decimal
                    base_norm_float = float(base_norm)
                    discounted_norm = base_norm_float * (1 - discount_percent/100)
                    st.success(f"üéØ –ù–æ—Ä–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: **{discounted_norm:.1f}** —à—Ç/—á–µ–ª")
            
            qty_made = st.number_input("–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (—à—Ç)", min_value=0, value=0, step=1, key="task_qty")
            count_by_norm = st.checkbox("–°–ß–ò–¢–ê–¢–¨ –ü–û –ù–û–†–ú–ï", value=True, key="task_count_norm")
            
            submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
            
            if submitted:
                add_task(line, sap_code, discount_percent, qty_made, count_by_norm)
    
    with col_form2:
        st.subheader("üë• –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        with st.form("add_employee_form"):
            emp_employee_id = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", [0] + sorted(id_to_fio.keys()), 
                                         format_func=lambda x: f"{x} - {id_to_fio.get(x, '')}" if x > 0 else "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                         key="emp_employee_id")
            emp_work_time = st.number_input("–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", min_value=0.0, value=8.0, step=0.5, key="emp_work_time")
            emp_line = st.selectbox("–õ–∏–Ω–∏—è", ["A3", "A4"], key="emp_line")
            
            submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            
            if submitted:
                add_employee(emp_employee_id, emp_work_time, emp_line)
        
        st.subheader("üîß –ù–æ–≤–∞—è —Ä–æ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        with st.form("add_support_form"):
            support_role = st.selectbox("–†–æ–ª—å", ["senior", "repair"], 
                                      format_func=lambda x: "–°—Ç–∞—Ä—à–∏–π" if x == "senior" else "–†–µ–º–æ–Ω—Ç–Ω–∏–∫",
                                      key="support_role")
            support_employee_id = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", [0] + sorted(id_to_fio.keys()), 
                                             format_func=lambda x: f"{x} - {id_to_fio.get(x, '')}" if x > 0 else "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                             key="support_employee_id")
            support_work_time = st.number_input("–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", min_value=0.0, value=8.0, step=0.5, key="support_work_time")
            
            submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å")
            
            if submitted:
                add_support_role(support_role, support_employee_id, support_work_time)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
st.header("üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")

if site_name == '–ö–∞—Ç—é—à–∞':
    col_tables1, col_tables2 = st.columns(2)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π A3
    with col_tables1:
        st.subheader("üìã –ó–∞–¥–∞–Ω–∏—è –ª–∏–Ω–∏–∏ A3")
        if st.session_state.tasks_A3:
            for i, task in enumerate(st.session_state.tasks_A3):
                col_task1, col_task2 = st.columns([4, 1])
                with col_task1:
                    st.write(f"**{task['sap_code']}** - {task['product_name']}")
                    norm_per_emp = float(task.get('norm_per_employee', 0))
                    norm_with_disc = int(task.get('norm_with_discount', 0))
                    discount = int(task.get('discount_percent', 0))
                    qty = int(task.get('qty_made', 0))
                    st.write(f"üìä –ù–æ—Ä–º–∞: {norm_per_emp:.1f} ‚Üí {norm_with_disc} —à—Ç/—á–µ–ª (—Å–∫–∏–¥–∫–∞ {discount}%)")
                    st.write(f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {qty} —à—Ç. | –ü–æ –Ω–æ—Ä–º–µ: {'‚úÖ' if task['count_by_norm'] else '‚ùå'}")
                with col_task2:
                    if st.button("üóëÔ∏è", key=f"del_task_A3_{i}"):
                        remove_task('A3', i)
                        st.rerun()
                st.divider()
        else:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª–∏–Ω–∏–∏ A3")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π A4
    with col_tables2:
        st.subheader("üìã –ó–∞–¥–∞–Ω–∏—è –ª–∏–Ω–∏–∏ A4")
        if st.session_state.tasks_A4:
            for i, task in enumerate(st.session_state.tasks_A4):
                col_task1, col_task2 = st.columns([4, 1])
                with col_task1:
                    st.write(f"**{task['sap_code']}** - {task['product_name']}")
                    norm_per_emp = float(task.get('norm_per_employee', 0))
                    norm_with_disc = int(task.get('norm_with_discount', 0))
                    discount = int(task.get('discount_percent', 0))
                    qty = int(task.get('qty_made', 0))
                    st.write(f"üìä –ù–æ—Ä–º–∞: {norm_per_emp:.1f} ‚Üí {norm_with_disc} —à—Ç/—á–µ–ª (—Å–∫–∏–¥–∫–∞ {discount}%)")
                    st.write(f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {qty} —à—Ç. | –ü–æ –Ω–æ—Ä–º–µ: {'‚úÖ' if task['count_by_norm'] else '‚ùå'}")
                with col_task2:
                    if st.button("üóëÔ∏è", key=f"del_task_A4_{i}"):
                        remove_task('A4', i)
                        st.rerun()
                st.divider()
        else:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª–∏–Ω–∏–∏ A4")

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
st.subheader("üë• –õ–∏–Ω–µ–π–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
if st.session_state.line_emps:
    for i, emp in enumerate(st.session_state.line_emps):
        col_emp1, col_emp2 = st.columns([4, 1])
        with col_emp1:
            st.write(f"**{emp['fio']}** (ID: {emp['employee_id']})")
            work_time = float(emp.get('work_time', 0))
            st.write(f"–õ–∏–Ω–∏—è: {emp['line']} | –ß–∞—Å—ã: {work_time:.1f}")
        with col_emp2:
            if st.button("üóëÔ∏è", key=f"del_emp_{i}"):
                remove_employee(i)
                st.rerun()
        st.divider()
else:
    st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

# –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
st.subheader("üîß –†–æ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
if st.session_state.supports:
    for i, support in enumerate(st.session_state.supports):
        col_support1, col_support2 = st.columns([4, 1])
        with col_support1:
            role_name = "–°—Ç–∞—Ä—à–∏–π" if support['role'] == 'senior' else "–†–µ–º–æ–Ω—Ç–Ω–∏–∫"
            st.write(f"**{role_name}**: {support['fio']} (ID: {support['employee_id']})")
            work_time = float(support.get('work_time', 0))
            st.write(f"–ß–∞—Å—ã: {work_time:.1f}")
        with col_support2:
            if st.button("üóëÔ∏è", key=f"del_support_{i}"):
                remove_support_role(i)
                st.rerun()
        st.divider()
else:
    st.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

# –†–µ–∑—é–º–µ
st.header("üìä –†–µ–∑—é–º–µ —Å–º–µ–Ω—ã")
show_stats = st.button("üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å", width='stretch')

if show_stats and (st.session_state.tasks_A3 or st.session_state.tasks_A4 or st.session_state.line_emps):
    col_summary1, col_summary2 = st.columns(2)
    
    with col_summary1:
        st.subheader("–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –ø–æ –∏–∑–¥–µ–ª–∏—è–º")
        
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
        st.info("""
        **üìä –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ:**
        - **–ù–æ—Ä–º–∞** - —Ä–∞—Å—á–µ—Ç–Ω—ã–π –Ω–æ—Ä–º–∞—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –Ω–æ—Ä–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        - **–ò–∑–≥–æ—Ç.** - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π
        - –ï—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ "–°–ß–ò–¢–ê–¢–¨ –ü–û –ù–û–†–ú–ï" —Å–Ω—è—Ç–∞, —Ç–æ –Ω–æ—Ä–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ
        - –ï—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–æ –Ω–æ—Ä–º–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ
        """)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ª–∏–Ω–∏—è–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
        line_hours_for_calc = {"A3": 0.0, "A4": 0.0}
        for emp in st.session_state.line_emps:
            line = emp.get('line', 'A3')
            work_time = emp.get('work_time', 0.0)
            if work_time is not None and line in line_hours_for_calc:
                line_hours_for_calc[line] += float(work_time)
        
        summary_data = calculate_product_summary(
            st.session_state.tasks_A3, 
            st.session_state.tasks_A4, 
            line_hours_for_calc
        )
        
        if summary_data:
            st.dataframe(
                summary_data,
                column_config={
                    "–ò–∑–¥–µ–ª–∏–µ": st.column_config.TextColumn("–ò–∑–¥–µ–ª–∏–µ", width="medium"),
                    "A3 (–Ω–æ—Ä–º–∞)": st.column_config.NumberColumn("A3 (–Ω–æ—Ä–º–∞)", format="%d"),
                    "A4 (–Ω–æ—Ä–º–∞)": st.column_config.NumberColumn("A4 (–Ω–æ—Ä–º–∞)", format="%d"),
                    "–ò—Ç–æ–≥–æ (–Ω–æ—Ä–º–∞)": st.column_config.NumberColumn("–ò—Ç–æ–≥–æ (–Ω–æ—Ä–º–∞)", format="%d"),
                    "A3 (–∏–∑–≥–æ—Ç.)": st.column_config.NumberColumn("A3 (–∏–∑–≥–æ—Ç.)", format="%d"),
                    "A4 (–∏–∑–≥–æ—Ç.)": st.column_config.NumberColumn("A4 (–∏–∑–≥–æ—Ç.)", format="%d"),
                    "–ò—Ç–æ–≥–æ (–∏–∑–≥–æ—Ç.)": st.column_config.NumberColumn("–ò—Ç–æ–≥–æ (–∏–∑–≥–æ—Ç.)", format="%d"),
                },
                width='stretch',
                hide_index=True
            )
        else:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with col_summary2:
        st.subheader("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ –ª–∏–Ω–∏—è–º")
        
        # –ü–æ–¥—Å—á—ë—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ª–∏–Ω–∏—è–º
        line_stats = calculate_line_statistics(st.session_state.line_emps)
        
        staff_data = [
            {"–õ–∏–Ω–∏—è": "A3", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": line_stats["counts"]["A3"], "–ß–∞—Å—ã": line_stats["hours"]["A3"]},
            {"–õ–∏–Ω–∏—è": "A4", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": line_stats["counts"]["A4"], "–ß–∞—Å—ã": line_stats["hours"]["A4"]},
            {"–õ–∏–Ω–∏—è": "–ò—Ç–æ–≥–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": line_stats["total_count"], "–ß–∞—Å—ã": line_stats["total_hours"]}
        ]
        
        st.dataframe(
            staff_data,
            column_config={
                "–õ–∏–Ω–∏—è": st.column_config.TextColumn("–õ–∏–Ω–∏—è"),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", format="%d"),
                "–ß–∞—Å—ã": st.column_config.NumberColumn("–ß–∞—Å–æ–≤", format="%.1f"),
            },
            width='stretch',
            hide_index=True
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if st.session_state.supports:
            senior = next((s for s in st.session_state.supports if s.get('role') == 'senior'), None)
            repair = next((s for s in st.session_state.supports if s.get('role') == 'repair'), None)
            
            st.write("**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**")
            if senior and senior.get('employee_id', 0) > 0:
                st.write(f"‚Ä¢ –°—Ç–∞—Ä—à–∏–π: {senior.get('fio', '')} ({senior.get('work_time', 0):.1f}—á)")
            if repair and repair.get('employee_id', 0) > 0:
                st.write(f"‚Ä¢ –†–µ–º–æ–Ω—Ç–Ω–∏–∫: {repair.get('fio', '')} ({repair.get('work_time', 0):.1f}—á)")
elif show_stats:
    st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", width='stretch'):
    try:
        tasks = []
        if site_name == '–ö–∞—Ç—é—à–∞':
            for t in st.session_state.tasks_A3:
                code = t.get('sap_code')
                item = sap_by_code.get(code)
                if not item:
                    continue
                tasks.append(TaskModel(
                    line='A3',
                    sap_id=item['id'],
                    qty_made=to_int_safe(t.get('qty_made'), 0),
                    count_by_norm=bool(t.get('count_by_norm')),
                    discount_percent=to_int_safe(t.get('discount_percent'), 0),
                ))
            for t in st.session_state.tasks_A4:
                code = t.get('sap_code')
                item = sap_by_code.get(code)
                if not item:
                    continue
                tasks.append(TaskModel(
                    line='A4',
                    sap_id=item['id'],
                    qty_made=to_int_safe(t.get('qty_made'), 0),
                    count_by_norm=bool(t.get('count_by_norm')),
                    discount_percent=to_int_safe(t.get('discount_percent'), 0),
                ))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
        line_emps = []
        for le in st.session_state.line_emps:
            clean_le = dict(le)
            clean_le['employee_id'] = clean_le.get('employee_id') or 0
            clean_le['fio'] = clean_le.get('fio') or ""
            clean_le['work_time'] = clean_le.get('work_time') or 0.0
            clean_le['line'] = clean_le.get('line') or "A3"
            line_emps.append(LineEmployeeModel(**clean_le))
        
        supports = []
        for s in st.session_state.supports:
            clean_s = dict(s)
            clean_s['role'] = clean_s.get('role') or "senior"
            clean_s['employee_id'] = clean_s.get('employee_id') or 0
            clean_s['fio'] = clean_s.get('fio') or ""
            clean_s['work_time'] = clean_s.get('work_time') or 0.0
            supports.append(SupportRoleModel(**clean_s))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ë–î
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ Pydantic v2
            tasks_dicts = [task.model_dump() for task in tasks]
            line_emps_dicts = [emp.model_dump() for emp in line_emps]
            supports_dicts = [support.model_dump() for support in supports]
        except AttributeError:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ Pydantic
            tasks_dicts = [task.dict() for task in tasks]
            line_emps_dicts = [emp.dict() for emp in line_emps]
            supports_dicts = [support.dict() for support in supports]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if st.session_state.get('debug_mode', False):
            st.write(f"**–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:**")
            st.write(f"- –ó–∞–¥–∞–Ω–∏–π: {len(tasks_dicts)}")
            st.write(f"- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(line_emps_dicts)}")
            st.write(f"- –†–æ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {len(supports_dicts)}")
            st.write(f"- –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {tasks_dicts[0] if tasks_dicts else '–ù–µ—Ç'}")
        
        upsert_report(site_id, rep_date, tasks_dicts, line_emps_dicts, supports_dicts)
        st.success("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        st.session_state.prefilled = False  # —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –Ω–∞ —Å–ª–µ–¥. —Ä–µ–Ω–¥–µ—Ä–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –ü–æ–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
with st.expander("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á—ë—Ç–∞ (read-only)"):
    current = get_report(site_id, rep_date)
    if not current:
        st.write("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    else:
        st.write({
            "tasks": current['tasks'],
            "line_emps": current['line_emps'],
            "supports": current['supports']
        })

# –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
if existing:
    st.divider()
    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç", type="secondary"):
        st.session_state.confirm_delete = True

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if st.session_state.get('confirm_delete', False):
        st.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç?")
        col_yes, col_no = st.columns(2)
        with col_yes:
            if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", type="primary"):
                try:
                    delete_report(site_id, rep_date)
                    st.success("‚úÖ –û—Ç—á—ë—Ç —É–¥–∞–ª—ë–Ω")
                    st.session_state.confirm_delete = False
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        with col_no:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state.confirm_delete = False
                st.rerun()
